"use client";

import { useState, useEffect, FormEvent } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Header, Footer } from "@/components";
import { isAuthenticated, getCurrentUser, AuthUser } from "@/lib/auth";
import { authService } from '@/services/api/auth';
import toast from "react-hot-toast";

// Mock order data
interface Order {
  id: string;
  date: string;
  status: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
  total: number;
  items: number;
}

export default function DashboardPage() {
  const router = useRouter();
  const [user, setUser] = useState<AuthUser | null>(null);
  const [loading, setLoading] = useState(true);
  const [recentOrders, setRecentOrders] = useState<Order[]>([]);

  // Profile editing state
  const [isEditMode, setIsEditMode] = useState(false);
  const [formData, setFormData] = useState<Partial<AuthUser>>({});
  const [saving, setSaving] = useState(false);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    // Check if user is authenticated
    if (!isAuthenticated()) {
      router.push('/login?redirect=dashboard');
      return;
    }

    // Get current user
    const fetchUser = async () => {
      const currentUser = await getCurrentUser();
      setUser(currentUser);
      setFormData(currentUser || {}); // Initialize form data with user data
    };
    fetchUser();

    // Simulate API call to get recent orders
    const fetchRecentOrders = async () => {
      setLoading(true);
      try {
        // In a real app, we would fetch from an API
        // For now, we'll use mock data
        setTimeout(() => {
          setRecentOrders([
            {
              id: "ORD-2023-1001",
              date: "2023-11-28",
              status: "delivered",
              total: 245000,
              items: 2
            },
            {
              id: "ORD-2023-0987",
              date: "2023-11-15",
              status: "shipped",
              total: 120000,
              items: 1
            },
            {
              id: "ORD-2023-0954",
              date: "2023-10-30",
              status: "delivered",
              total: 350000,
              items: 3
            }
          ]);
          setLoading(false);
        }, 800);
      } catch (error) {
        console.error("Error fetching orders:", error);
        setLoading(false);
      }
    };

    fetchRecentOrders();
  }, [router]);

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));

    // Clear validation error when field is edited
    if (validationErrors[name]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // Validate form data
  const validateForm = () => {
    const errors: Record<string, string> = {};

    if (!formData.first_name?.trim()) errors.first_name = "First name is required";
    if (!formData.last_name?.trim()) errors.last_name = "Last name is required";
    if (!formData.email?.trim()) errors.email = "Email is required";
    else if (!/^\S+@\S+\.\S+$/.test(formData.email)) errors.email = "Invalid email format";
    if (!formData.phone?.trim()) errors.phone = "Phone is required";
    if (!formData.address?.trim()) errors.address = "Address is required";
    if (!formData.city?.trim()) errors.city = "City is required";
    if (!formData.state?.trim()) errors.state = "State is required";
    if (!formData.country?.trim()) errors.country = "Country is required";
    if (!formData.zip_code?.trim()) errors.zip_code = "Zip code is required";

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error("Please fix the errors in the form");
      return;
    }

    setSaving(true);
    try {
      // In a real app, you would call an API to update the profile
      // For now, we'll simulate a successful update
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Update the user state with form data
      setUser(prev => prev ? { ...prev, ...formData } : null);
      setIsEditMode(false);
      toast.success("Profile updated successfully!");
    } catch (err) {
      console.error('Profile update error:', err);
      toast.error("Failed to update profile");
    } finally {
      setSaving(false);
    }
  };

  // Toggle edit mode
  const toggleEditMode = () => {
    if (isEditMode) {
      // If canceling edit, reset form data to current user data
      setFormData(user || {});
      setValidationErrors({});
    }
    setIsEditMode(!isEditMode);
  };

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  // Format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Status badge color
  const getStatusColor = (status: Order['status']) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-500/20 text-yellow-400';
      case 'processing':
        return 'bg-blue-500/20 text-blue-400';
      case 'shipped':
        return 'bg-purple-500/20 text-purple-400';
      case 'delivered':
        return 'bg-green-500/20 text-green-400';
      case 'cancelled':
        return 'bg-red-500/20 text-red-400';
      default:
        return 'bg-gray-500/20 text-gray-400';
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-black">
      <Header />

      <main className="flex-grow w-full max-w-6xl mx-auto px-6 py-12">
        {loading ? (
          <div className="flex justify-center items-center py-20">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-amber-500"></div>
          </div>
        ) : (
          <>
            {/* User Profile Section */}
            <div className="relative bg-gradient-to-br from-neutral-900 via-neutral-900/95 to-amber-900/20 backdrop-blur-sm rounded-lg border border-amber-500/10 shadow-xl overflow-hidden mb-8 transform transition-all duration-300 hover:shadow-amber-500/5 hover:border-amber-500/20">
              {/* Decorative elements */}
              <div className="absolute top-0 right-0 w-64 h-64 bg-amber-500/5 rounded-full blur-3xl -mr-32 -mt-32 pointer-events-none"></div>
              <div className="absolute bottom-0 left-0 w-64 h-64 bg-amber-500/5 rounded-full blur-3xl -ml-32 -mb-32 pointer-events-none"></div>

              {/* Header with title and actions */}
              <div className="relative flex justify-between items-center px-8 py-6 border-b border-white/5">
                <h2 className="text-xl font-bold text-white flex items-center">
                  <svg className="w-5 h-5 mr-2 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Profile Information
                </h2>

                {/* Edit/Save/Cancel Buttons */}
                <div className="flex gap-2">
                  {isEditMode ? (
                    <div className="flex gap-2">
                      <button
                        onClick={toggleEditMode}
                        className="px-4 py-2 text-sm bg-neutral-800 text-white rounded-md hover:bg-neutral-700 transition-all shadow-md hover:shadow-lg flex items-center gap-1 group"
                        disabled={saving}
                      >
                        <svg className="w-4 h-4 mr-1 text-red-400 group-hover:scale-110 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                        Cancel
                      </button>
                      <button
                        onClick={handleSubmit}
                        className="px-4 py-2 text-sm bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-md hover:from-amber-400 hover:to-amber-500 transition-all shadow-md hover:shadow-lg flex items-center gap-1 group"
                        disabled={saving}
                      >
                        {saving ? (
                          <>
                            <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Saving...
                          </>
                        ) : (
                          <>
                            <svg className="w-4 h-4 mr-1 group-hover:scale-110 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            Save Changes
                          </>
                        )}
                      </button>
                    </div>
                  ) : (
                    <button
                      onClick={toggleEditMode}
                      className="px-4 py-2 text-sm bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-md hover:from-amber-400 hover:to-amber-500 transition-all shadow-md hover:shadow-lg flex items-center gap-1 group"
                    >
                      <svg className="w-4 h-4 mr-1 group-hover:rotate-12 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                      Edit Profile
                    </button>
                  )}
                </div>
              </div>

              {isEditMode ? (
                // Edit Mode - Form
                <form className="p-8 space-y-8" onSubmit={handleSubmit}>
                  {/* Header with title and avatar */}
                  <div className="flex flex-col items-center mb-8">
                    <div className="relative group mb-6">
                      <div className="absolute inset-0 bg-gradient-to-r from-amber-500 to-amber-600 rounded-full blur-md opacity-50 group-hover:opacity-75 transition-opacity duration-300"></div>
                      <div className="relative w-32 h-32 rounded-full overflow-hidden border-4 border-amber-500/30 bg-neutral-800 flex items-center justify-center shadow-lg shadow-amber-900/20">
                        {formData.first_name ? (
                          <span className="text-amber-500 font-bold text-4xl">
                            {formData.first_name.charAt(0)}{formData.last_name?.charAt(0)}
                          </span>
                        ) : (
                          <svg className="w-16 h-16 text-white/70" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                        )}
                      </div>
                      <div className="absolute bottom-0 right-0 bg-amber-500 rounded-full p-2 shadow-lg border-2 border-neutral-900 group-hover:bg-amber-400 transition-colors cursor-pointer">
                        <svg className="w-4 h-4 text-black" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                      </div>
                    </div>
                    <h1 className="text-2xl font-bold text-white mb-1 flex items-center">
                      <svg className="w-5 h-5 mr-2 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                      </svg>
                      Edit Your Profile
                    </h1>
                    <p className="text-amber-400/80 text-sm mb-2">Update your personal information below</p>
                  </div>
                  {/* Form Fields Container */}
                  <div className="bg-white/5 rounded-xl p-6 backdrop-blur-sm border border-white/5 shadow-inner">
                    <div className="text-white/60 text-sm mb-4 flex items-center">
                      <svg className="w-4 h-4 mr-1 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2" />
                      </svg>
                      User ID: <span className="text-white ml-1">{user?.id}</span>
                    </div>

                    {/* Personal Information */}
                    <div className="mb-8">
                      <h3 className="text-amber-500 text-sm font-semibold uppercase tracking-wider mb-4 flex items-center">
                        <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        Personal Information
                      </h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="relative group">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">First Name</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                              </svg>
                            </div>
                            <input
                              type="text"
                              name="first_name"
                              value={formData.first_name || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.first_name ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your first name"
                            />
                          </div>
                          {validationErrors.first_name && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.first_name}
                            </p>
                          )}
                        </div>

                        <div className="relative group">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">Last Name</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                              </svg>
                            </div>
                            <input
                              type="text"
                              name="last_name"
                              value={formData.last_name || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.last_name ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your last name"
                            />
                          </div>
                          {validationErrors.last_name && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.last_name}
                            </p>
                          )}
                        </div>

                        <div className="relative group md:col-span-2">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">Email</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                              </svg>
                            </div>
                            <input
                              type="email"
                              name="email"
                              value={formData.email || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.email ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your email address"
                            />
                          </div>
                          {validationErrors.email && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.email}
                            </p>
                          )}
                        </div>

                        <div className="relative group">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">Phone</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                              </svg>
                            </div>
                            <input
                              type="tel"
                              name="phone"
                              value={formData.phone || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.phone ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your phone number"
                            />
                          </div>
                          {validationErrors.phone && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.phone}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Address Information */}
                    <div>
                      <h3 className="text-amber-500 text-sm font-semibold uppercase tracking-wider mb-4">Address Information</h3>

                      <div className="space-y-4">
                        <div>
                          <label className="block text-white/60 text-sm mb-1">Address</label>
                          <input
                            type="text"
                            name="address"
                            value={formData.address || ''}
                            onChange={handleInputChange}
                            className={`w-full px-3 py-2 bg-neutral-800/50 rounded-sm border ${validationErrors.address ? 'border-red-500' : 'border-white/10'} focus:outline-none focus:border-amber-500`}
                          />
                          {validationErrors.address && <p className="text-red-500 text-xs mt-1">{validationErrors.address}</p>}
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-white/60 text-sm mb-1">City</label>
                            <input
                              type="text"
                              name="city"
                              value={formData.city || ''}
                              onChange={handleInputChange}
                              className={`w-full px-3 py-2 bg-neutral-800/50 rounded-sm border ${validationErrors.city ? 'border-red-500' : 'border-white/10'} focus:outline-none focus:border-amber-500`}
                            />
                            {validationErrors.city && <p className="text-red-500 text-xs mt-1">{validationErrors.city}</p>}
                          </div>

                          <div>
                            <label className="block text-white/60 text-sm mb-1">State</label>
                            <input
                              type="text"
                              name="state"
                              value={formData.state || ''}
                              onChange={handleInputChange}
                              className={`w-full px-3 py-2 bg-neutral-800/50 rounded-sm border ${validationErrors.state ? 'border-red-500' : 'border-white/10'} focus:outline-none focus:border-amber-500`}
                            />
                            {validationErrors.state && <p className="text-red-500 text-xs mt-1">{validationErrors.state}</p>}
                          </div>
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-white/60 text-sm mb-1">Country</label>
                            <input
                              type="text"
                              name="country"
                              value={formData.country || ''}
                              onChange={handleInputChange}
                              className={`w-full px-3 py-2 bg-neutral-800/50 rounded-sm border ${validationErrors.country ? 'border-red-500' : 'border-white/10'} focus:outline-none focus:border-amber-500`}
                            />
                            {validationErrors.country && <p className="text-red-500 text-xs mt-1">{validationErrors.country}</p>}
                          </div>

                          <div>
                            <label className="block text-white/60 text-sm mb-1">Zip Code</label>
                            <input
                              type="text"
                              name="zip_code"
                              value={formData.zip_code || ''}
                              onChange={handleInputChange}
                              className={`w-full px-3 py-2 bg-neutral-800/50 rounded-sm border ${validationErrors.zip_code ? 'border-red-500' : 'border-white/10'} focus:outline-none focus:border-amber-500`}
                            />
                            {validationErrors.zip_code && <p className="text-red-500 text-xs mt-1">{validationErrors.zip_code}</p>}
                          </div>
                        </div>
                      </div>
                    </div>
                </form>
              ) : (
                // View Mode
                <div className="p-8">
                  <div className="flex flex-col lg:flex-row gap-8">
                    {/* Left column - Avatar and basic info */}
                    <div className="flex flex-col items-center lg:items-start">
                      <div className="relative group">
                        <div className="absolute inset-0 bg-gradient-to-r from-amber-500 to-amber-600 rounded-full blur-md opacity-50 group-hover:opacity-75 transition-opacity duration-300"></div>
                        <div className="relative w-32 h-32 rounded-full overflow-hidden border-4 border-amber-500/30 bg-neutral-800 flex items-center justify-center shadow-lg shadow-amber-900/20">
                          {user?.image_url ? (
                            <img
                              src={user.image_url}
                              alt={`${user.first_name} ${user.last_name}`}
                              className="w-full h-full object-cover"
                            />
                          ) : user?.first_name ? (
                            <span className="text-amber-500 font-bold text-4xl">
                              {user.first_name.charAt(0)}{user.last_name?.charAt(0)}
                            </span>
                          ) : (
                            <svg className="w-16 h-16 text-white/70" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                          )}
                        </div>
                      </div>

                      <h1 className="mt-6 text-3xl font-bold text-white">
                        {user?.first_name} {user?.last_name}
                      </h1>
                      <p className="text-amber-400/80 font-medium mt-1 flex items-center">
                        <svg className="w-4 h-4 mr-1 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                        {user?.email}
                      </p>

                      <div className="flex flex-wrap mt-4 gap-2">
                        <span className="px-3 py-1 bg-gradient-to-r from-amber-500/20 to-amber-600/20 text-amber-400 rounded-full text-xs font-medium border border-amber-500/10 shadow-sm">
                          {user?.role === 'seller' ? 'Seller Account' : 'Consumer Account'}
                        </span>
                        <span className="px-3 py-1 bg-gradient-to-r from-green-500/20 to-green-600/20 text-green-400 rounded-full text-xs font-medium border border-green-500/10 shadow-sm">
                          Verified
                        </span>
                      </div>
                    </div>

                    {/* Right column - User details */}
                    <div className="flex-1 bg-white/5 rounded-xl p-6 backdrop-blur-sm border border-white/5 shadow-inner">
                      <h3 className="text-amber-500 text-sm font-semibold uppercase tracking-wider mb-4 flex items-center">
                        <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Account Information
                      </h3>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Contact Information */}
                        <div className="space-y-4">
                          <h4 className="text-white/60 text-xs uppercase tracking-wider">Contact Details</h4>

                          <div className="flex items-start gap-3">
                            <div className="mt-0.5 bg-amber-500/10 p-1.5 rounded-md">
                              <svg className="w-4 h-4 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                              </svg>
                            </div>
                            <div>
                              <div className="text-white/40 text-xs">Phone Number</div>
                              <div className="text-white font-medium">{user?.phone || 'Not provided'}</div>
                            </div>
                          </div>

                          <div className="flex items-start gap-3">
                            <div className="mt-0.5 bg-amber-500/10 p-1.5 rounded-md">
                              <svg className="w-4 h-4 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                              </svg>
                            </div>
                            <div>
                              <div className="text-white/40 text-xs">Username</div>
                              <div className="text-white font-medium">@{user?.username || 'username'}</div>
                            </div>
                          </div>
                        </div>

                        {/* Location Information */}
                        <div className="space-y-4">
                          <h4 className="text-white/60 text-xs uppercase tracking-wider">Location</h4>

                          <div className="flex items-start gap-3">
                            <div className="mt-0.5 bg-amber-500/10 p-1.5 rounded-md">
                              <svg className="w-4 h-4 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                              </svg>
                            </div>
                            <div>
                              <div className="text-white/40 text-xs">Address</div>
                              <div className="text-white font-medium">{user?.address || 'Not provided'}</div>
                              <div className="text-white/80 text-sm mt-0.5">{user?.city}, {user?.state} {user?.zip_code}</div>
                              <div className="text-white/60 text-sm">{user?.country}</div>
                            </div>
                          </div>

                          <div className="flex items-start gap-3">
                            <div className="mt-0.5 bg-amber-500/10 p-1.5 rounded-md">
                              <svg className="w-4 h-4 text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2" />
                              </svg>
                            </div>
                            <div>
                              <div className="text-white/40 text-xs">User ID</div>
                              <div className="text-white font-medium">{user?.id}</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {/* Location Information */}
                    <div className="mt-8">
                      <h3 className="text-amber-500 text-sm font-semibold uppercase tracking-wider mb-4 flex items-center">
                        <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        Location Information
                      </h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Address */}
                        <div className="relative group md:col-span-2">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">Address</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                              </svg>
                            </div>
                            <input
                              type="text"
                              name="address"
                              value={formData.address || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.address ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your street address"
                            />
                          </div>
                          {validationErrors.address && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.address}
                            </p>
                          )}
                        </div>
                        
                        {/* City */}
                        <div className="relative group">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">City</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                              </svg>
                            </div>
                            <input
                              type="text"
                              name="city"
                              value={formData.city || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.city ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your city"
                            />
                          </div>
                          {validationErrors.city && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.city}
                            </p>
                          )}
                        </div>
                        
                        {/* State */}
                        <div className="relative group">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">State/Province</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                              </svg>
                            </div>
                            <input
                              type="text"
                              name="state"
                              value={formData.state || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.state ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your state or province"
                            />
                          </div>
                          {validationErrors.state && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.state}
                            </p>
                          )}
                        </div>
                        
                        {/* Country */}
                        <div className="relative group">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">Country</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                              </svg>
                            </div>
                            <input
                              type="text"
                              name="country"
                              value={formData.country || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.country ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your country"
                            />
                          </div>
                          {validationErrors.country && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.country}
                            </p>
                          )}
                        </div>
                        
                        {/* Zip Code */}
                        <div className="relative group">
                          <label className="block text-white/60 text-sm mb-1 group-focus-within:text-amber-400 transition-colors">Zip/Postal Code</label>
                          <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                              <svg className="w-4 h-4 text-white/30 group-focus-within:text-amber-500 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                              </svg>
                            </div>
                            <input
                              type="text"
                              name="zip_code"
                              value={formData.zip_code || ''}
                              onChange={handleInputChange}
                              className={`w-full pl-10 pr-3 py-2.5 bg-neutral-800/50 rounded-md border ${validationErrors.zip_code ? 'border-red-500 bg-red-900/10' : 'border-white/10 group-focus-within:border-amber-500/50'} focus:outline-none focus:ring-1 focus:ring-amber-500/30 transition-all`}
                              placeholder="Enter your zip/postal code"
                            />
                          </div>
                          {validationErrors.zip_code && (
                            <p className="flex items-center text-red-400 text-xs mt-1.5">
                              <svg className="w-3 h-3 mr-1 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                              </svg>
                              {validationErrors.zip_code}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    {/* Submit Button */}
                    <div className="mt-8 flex justify-end">
                      <button 
                        type="submit"
                        className="px-6 py-3 text-sm bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-md hover:from-amber-400 hover:to-amber-500 transition-all shadow-md hover:shadow-lg flex items-center gap-2 font-medium"
                        disabled={saving}
                      >
                        {saving ? (
                          <>
                            <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Saving Changes...
                          </>
                        ) : (
                          <>
                            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            Save Profile
                          </>
                        )}
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Dashboard Grid */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8">
              {/* Quick Stats */}
              <div className="bg-neutral-900/80 backdrop-blur-sm rounded-sm border border-white/10 p-6">
                <h2 className="text-lg font-bold text-white mb-4">Account Summary</h2>
                <div className="space-y-4">
                  <div className="flex justify-between items-center pb-2 border-b border-white/10">
                    <span className="text-white/70">Member Since</span>
                    <span className="text-white">November 2023</span>
                  </div>
                  <div className="flex justify-between items-center pb-2 border-b border-white/10">
                    <span className="text-white/70">Total Orders</span>
                    <span className="text-white">{recentOrders.length}</span>
                  </div>
                  <div className="flex justify-between items-center pb-2 border-b border-white/10">
                    <span className="text-white/70">Wishlist Items</span>
                    <span className="text-white">4</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-white/70">Rewards Points</span>
                    <span className="text-amber-500 font-bold">250 pts</span>
                  </div>
                </div>
              </div>

              {/* Recent Activity */}
              <div className="bg-neutral-900/80 backdrop-blur-sm rounded-sm border border-white/10 p-6">
                <h2 className="text-lg font-bold text-white mb-4">Recent Activity</h2>
                <div className="space-y-4">
                  <div className="flex items-start">
                    <div className="w-8 h-8 rounded-full bg-green-500/20 flex items-center justify-center mr-3 flex-shrink-0">
                      <svg className="w-4 h-4 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-white text-sm">Your order <span className="text-amber-400">ORD-2023-1001</span> has been delivered</p>
                      <p className="text-white/50 text-xs">2 days ago</p>
                    </div>
                  </div>
                  <div className="flex items-start">
                    <div className="w-8 h-8 rounded-full bg-blue-500/20 flex items-center justify-center mr-3 flex-shrink-0">
                      <svg className="w-4 h-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-white text-sm">Payment of <span className="text-amber-400">{formatCurrency(245000)}</span> processed</p>
                      <p className="text-white/50 text-xs">2 days ago</p>
                    </div>
                  </div>
                  <div className="flex items-start">
                    <div className="w-8 h-8 rounded-full bg-purple-500/20 flex items-center justify-center mr-3 flex-shrink-0">
                      <svg className="w-4 h-4 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </div>
                    <div>
                      <p className="text-white text-sm">You left a review for <span className="text-amber-400">Arabica Premium Beans</span></p>
                      <p className="text-white/50 text-xs">5 days ago</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Recommended Products */}
              <div className="bg-neutral-900/80 backdrop-blur-sm rounded-sm border border-white/10 p-6">
                <h2 className="text-lg font-bold text-white mb-4">Recommended For You</h2>
                <div className="space-y-4">
                  <div className="flex items-center">
                    <div className="w-16 h-16 rounded-sm overflow-hidden mr-4 flex-shrink-0">
                      <img
                        src="https://images.unsplash.com/photo-1559056199-641a0ac8b55e?q=80&w=300"
                        alt="Coffee Beans"
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <div>
                      <Link href="/products/101" className="text-white hover:text-amber-400 transition-colors">
                        Arabica Premium Beans
                      </Link>
                      <p className="text-amber-500 font-medium">{formatCurrency(120000)}</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <div className="w-16 h-16 rounded-sm overflow-hidden mr-4 flex-shrink-0">
                      <img
                        src="https://images.unsplash.com/photo-1514432324607-a09d9b4aefdd?q=80&w=300"
                        alt="Coffee Beans"
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <div>
                      <Link href="/products/203" className="text-white hover:text-amber-400 transition-colors">
                        Robusta Dark Roast
                      </Link>
                      <p className="text-amber-500 font-medium">{formatCurrency(85000)}</p>
                    </div>
                  </div>
                  <Link href="/products" className="text-amber-500 hover:text-amber-400 text-sm block text-center mt-2">
                    View All Products
                  </Link>
                </div>
              </div>
            </div>

            {/* Recent Orders */}
            <div className="bg-neutral-900/80 backdrop-blur-sm rounded-sm border border-white/10 overflow-hidden">
              <div className="p-6 border-b border-white/10 flex justify-between items-center">
                <h2 className="text-xl font-bold text-white">Recent Orders</h2>
                <Link
                  href="/orders"
                  className="text-amber-500 hover:text-amber-400 transition-colors text-sm"
                >
                  View All Orders
                </Link>
              </div>

              {recentOrders.length === 0 ? (
                <div className="p-8 text-center">
                  <p className="text-white/60">You haven't placed any orders yet.</p>
                  <Link
                    href="/products"
                    className="inline-block mt-4 px-4 py-2 bg-amber-500 text-black rounded-sm hover:bg-amber-400 transition-colors"
                  >
                    Start Shopping
                  </Link>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-neutral-800/50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Order ID
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Date
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Status
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Total
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white/60 uppercase tracking-wider">
                          Items
                        </th>
                        <th className="px-6 py-3 text-right text-xs font-medium text-white/60 uppercase tracking-wider">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-white/10">
                      {recentOrders.map((order) => (
                        <tr key={order.id} className="hover:bg-white/5 transition-colors">
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-white">
                            {order.id}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-white/70">
                            {formatDate(order.date)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(order.status)}`}>
                              {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-amber-500 font-medium">
                            {formatCurrency(order.total)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-white/70">
                            {order.items} {order.items === 1 ? 'item' : 'items'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                            <Link
                              href={`/orders/${order.id}`}
                              className="text-amber-500 hover:text-amber-400 transition-colors"
                            >
                              View Details
                            </Link>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </>
        )}
      </main>

      <Footer />
    </div>
  );
}
